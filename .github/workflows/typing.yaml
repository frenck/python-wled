---
name: Typing

# yamllint disable-line rule:truthy
on: [push, pull_request]

jobs:
  mypy:
    name: mypy on Python ${{ matrix.python }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.8, 3.9]
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🏗 Set up Python ${{ matrix.python }}
        id: python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python }}
      - name: 🏗 Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: ⤵️ Restore cached Python PIP packages
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('.github/workflows/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ steps.python.outputs.python-version }}-
      - name: 🏗 Install workflow dependencies
        run: |
          pip install -r .github/workflows/requirements.txt
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: ⤵️ Restore cached Python virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-
      - name: 🏗 Install dependencies
        run: poetry install --no-interaction
      - name: 🚀 Run mypy
        run: poetry run mypy examples src tests

  pyright:
    name: pyright on Python ${{ matrix.python }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.8, 3.9]
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🏗 Set up Python ${{ matrix.python }}
        id: python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python }}
      - name: 🏗 Read .nvmrc
        id: nvm
        run: echo "##[set-output name=nvmrc;]$(cat .nvmrc)"
      - name: 🏗 Set up Node.js ${{ steps.nvm.outputs.nvmrc }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: "${{ steps.nvm.outputs.nvmrc }}"
      - name: 🏗 Get pip cache directory
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: ⤵️ Restore cached Python PIP packages
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: node-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('.github/workflows/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ steps.python.outputs.python-version }}-
      - name: 🏗 Install workflow dependencies
        run: |
          pip install -r .github/workflows/requirements.txt
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: ⤵️ Restore cached Python virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-
      - name: 🏗 Install Python dependencies
        run: poetry install --no-interaction
      - name: 🏗  Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: ⤵️ Restore cached node modules
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: node-${{ runner.os }}-${{ steps.nvm.outputs.nvmrc }}-${{ hashFiles('.github/workflows/requirements.txt') }}
          restore-keys: |
            node-${{ runner.os }}-${{ steps.nvm.outputs.nvmrc }}-
      - name: 🏗 Install dependencies
        run: |
          pip install -r .github/workflows/requirements.txt
          poetry install
          npm install
      - name: 🚀 Run pyright
        run: poetry run npm run pyright
